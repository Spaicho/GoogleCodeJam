import java.util.*;
import java.io.*;
public class Solution {
  public static void main(String[] args) {
    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
    int tt = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.
    
    for (int t = 1; t <= tt; ++t) {
      int n = in.nextInt();
      int l = in.nextInt();
      
	  //System.out.println(1+"/"+n);
      double r1 = ((double)1/(double)n)*100;
	  //System.out.println(r1);

      long r1i = (long)r1;
	  //System.out.println(r1i);

      double r1f = r1 - r1i;
	  //System.out.println(r1f);
	  
	  double rr1f =r1f;
	  int ii = 1;
	  while(rr1f<0.5d && rr1f !=0){
		  rr1f +=r1f;
	      long rr1i = (long)rr1f;
	      rr1f = rr1f - rr1i;
	      ii++;
	  }

	  int currMax = 0;
	  int sumC = 0;
	  ArrayList<Integer> list = new ArrayList<Integer>();
	  
      for (int i = 0; i < l; ++i) {
          long c = in.nextInt();
          sumC+=c;
          long roundc = 0;
          double r2 = ((double)c/(double)n)*100;
          long r2i = (long)r2;
          double r2f = r2 - r2i;
          if(r2f>=0.5d)
        	  roundc = r2i +1;
          else{
        	  roundc = r2i;
        	  if(r2f!=0d){
	        	  int hm = 0;
	        	  double rr2f = r2f;
	        	  while(rr2f<0.5d){
	        		  rr2f +=r2f;
	        	      long rr2i = (long)rr2f;
	        	      rr2f = rr2f - rr2i;
	        	      hm++;
	        	  }
	        	  if(hm<=ii)
	        		  list.add(hm);
        	  }
          }

          currMax += roundc;
      }
      
      if(r1f==0){
    	  System.out.println("Case #" + t + ": "+100);
    	  continue;
      } else if(r1f>=0.5d){
    	  long max = currMax + (n - sumC)*(r1i+1);
    	  System.out.println("Case #" + t + ": "+max);
    	  continue;
      }

      int rem = n - sumC;
      Collections.sort(list);
      for(int j : list){
    	  rem -= j;
    	  if(rem>=0)
    		  currMax += r1i+1;
    	  else if(rem<0){
    		  rem+=j;
    		  break;
    	  } else
    		  break;
    	  
      }

      currMax+=(rem/ii)*(r1i+1);
      currMax += (rem - (rem/ii))* (r1i);
      
      
	  System.out.println("Case #" + t + ": "+currMax);




     
      
    }
  }
}